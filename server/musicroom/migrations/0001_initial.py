# Generated by Django 3.0.8 on 2020-08-31 16:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('name', models.CharField(max_length=100)),
                ('last_seen', models.DateTimeField()),
                ('room_joined_on', models.DateTimeField(default=None, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField()),
                ('is_paused', models.BooleanField(default=False)),
                ('paused_on', models.DateTimeField(default=None, null=True)),
                ('duration_to_complete', models.TimeField()),
                ('play_start_time', models.DateTimeField()),
                ('no_tracks', models.IntegerField(default=0)),
                ('code', models.CharField(default=None, max_length=50, null=True)),
                ('access_users', models.ManyToManyField(related_name='access_to_rooms', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField()),
                ('title', models.CharField(max_length=255)),
                ('artists', models.CharField(max_length=255)),
                ('duration', models.TimeField()),
                ('plays_count', models.IntegerField()),
                ('ref_id', models.CharField(default=None, max_length=255, null=True)),
                ('storage_bucket', models.CharField(max_length=255)),
                ('playback_path', models.CharField(max_length=255)),
                ('image_path', models.CharField(default=None, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RoomTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField()),
                ('next_roomtrack', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='previous_roomtrack', to='musicroom.RoomTrack')),
                ('room', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roomtracks', to='musicroom.Room')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='musicroom.Track')),
            ],
        ),
        migrations.AddField(
            model_name='room',
            name='current_roomtrack',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='musicroom.RoomTrack'),
        ),
        migrations.AddField(
            model_name='user',
            name='room',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='musicroom.Room'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('init_on', models.DateTimeField()),
                ('is_accepted', models.BooleanField()),
                ('accepted_on', models.DateTimeField(default=None, null=True)),
                ('score', models.IntegerField()),
                ('common_time', models.TimeField()),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user1_set', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user2_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user1', 'user2')},
            },
        ),
    ]
